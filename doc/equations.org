#+title: Ivy Language
#+options: num:nil toc:nil


* Expressions
$$
e :: \text{ l } | (\textbf{if } e_1\:e_2\:e_3) | (\textbf{fn } x\:e_1) | (\textbf{op } e_1\:e_2) | (e_1\:e_2)
$$
Where op ranges over the set of operators {+, -, *, >=} and l ranges over the set of literals 
$\mathbb Z\cup \{nil, t\}$, $v$ the values $v::= \text{ l } | (\text{fn } x\:e_1)$, 
and $x$ the variable names: alphanumeric strings minus $\{if, fn\}\cup op\cup l$ 

We then have reduction rules:

* Operations
$$
\frac{e_1\rightarrow e_1'}{(op\:e_1\:e_2)\rightarrow(op\:e_1\:e_2)}
$$

$$
(+\:n_1\:n_2)\rightarrow m\text{ if } m = n_1 + n_2
$$
$$
(-\:n_1\:n_2)\rightarrow m\text{ if } m = n_1 - n_2
$$
$$
(*\:n_1\:n_2)\rightarrow m\text{ if } m = n_1 * n_2
$$
$$
(>= \:n_1\:n_2)\rightarrow t\text{ if } m = n_1 \geq n_2
$$
$$
(>=\:n_1\:n_2)\rightarrow nil\text{ if } m = n_1 \ngeq n_2
$$

* Conditions
Condition takes a step.
$$
\frac{e_1\rightarrow e_1'}{(\textbf{if }e_1\:e_2\:e_3)\rightarrow (\textbf{if }e_1'\:e_2\:e_3)}
$$
If branch (condition true)
$$
\frac{v\neq nil}{(\textbf{if }v\:e_2\:e_3)\rightarrow e_2}
$$
Else branch (condition false)
$$
(\textbf{if }nil\:e_2\:e_3)\rightarrow e_3
$$

* Functions
Left-Evaluation
$$
\frac{e_1\rightarrow e_1'}{(e_1\:e_2)\rightarrow (e_1')}
$$
Application by name
$$
((\textbf{fn }\:x\:e_1) e_2)\rightarrow \{e_2/x\}e_1
$$
Recursive function: x is the name of the function, y is the parameter
$$
(\textbf{fn }\:x\:y\:e)\rightarrow \{(\textbf{fn }\:x\:y\:e)/x\}(\textbf{fn }\:y\:e)
$$

\pagebreak
* Programs
With all the reduction rules for expressions, we introduce a /program/, which can be:
+ an expression
+ a sequence of programs
+ a definition, which adds a name/expression to the global store
$$
p = e | p_1\:p_2 | (\textbf{def } x\:e)
$$
With reduction rules involving a pair $\langle p, g\rangle$, where $g$ is a global store, a partial 
function $g:x\mapsto v$.

discard values

$$
\langle v\: p, g\rangle\rightarrow \langle p, g\rangle
$$
sequence combination

$$
\frac{\langle p_1, g\rangle\rightarrow \langle p_1', g'\rangle}
{\langle p_1\:p_2, g\rangle \rightarrow \langle p_1'\:p_2, g'\rangle}
$$
substitution: perform only when no other reduction rule applies

$$
\frac{\langle p, g\rangle \nrightarrow \langle p', g'\rangle}{\langle p, g\rangle\to \langle gp, g\rangle} 
\text{ if }fv(p)\subseteq dom(g)
$$

definition: add a variable to the global scope:
$$
\langle (\textbf{def }x\: e), g\rangle \rightarrow \langle nil, g + \{x\mapsto e\}\rangle\text{ if }x\notin dom(g)
$$
